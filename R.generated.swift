//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 9 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: AGREE
      ///
      /// Key: AGREE
      ///
      /// Locales: en, ar
      var agreE: RswiftResources.StringResource { .init(key: "AGREE", tableName: "Localizable", source: source, developmentValue: "AGREE", comment: nil) }

      /// en translation: ERROR
      ///
      /// Key: ERROR
      ///
      /// Locales: en, ar
      var erroR: RswiftResources.StringResource { .init(key: "ERROR", tableName: "Localizable", source: source, developmentValue: "ERROR", comment: nil) }

      /// en translation: Hello
      ///
      /// Key: Hello
      ///
      /// Locales: en, ar
      var hello: RswiftResources.StringResource { .init(key: "Hello", tableName: "Localizable", source: source, developmentValue: "Hello", comment: nil) }

      /// en translation: You have a connection problem
      ///
      /// Key: You have a connection problem
      ///
      /// Locales: en, ar
      var youHaveAConnectionProblem: RswiftResources.StringResource { .init(key: "You have a connection problem", tableName: "Localizable", source: source, developmentValue: "You have a connection problem", comment: nil) }

      /// en translation: You have a problem connecting to the Internet try Call again and try again
      ///
      /// Key: You have a problem connecting to the Internet try Call again and try again
      ///
      /// Locales: en, ar
      var youHaveAProblemConnectingToTheInternetTryCallAgainAndTryAgain: RswiftResources.StringResource { .init(key: "You have a problem connecting to the Internet try Call again and try again", tableName: "Localizable", source: source, developmentValue: "You have a problem connecting to the Internet try Call again and try again", comment: nil) }

      /// en translation: Camera
      ///
      /// Key: camera.lan
      ///
      /// Locales: en, ar
      var cameraLan: RswiftResources.StringResource { .init(key: "camera.lan", tableName: "Localizable", source: source, developmentValue: "Camera", comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: cancel.lan
      ///
      /// Locales: en, ar
      var cancelLan: RswiftResources.StringResource { .init(key: "cancel.lan", tableName: "Localizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Photo library
      ///
      /// Key: photo.library.lan
      ///
      /// Locales: en, ar
      var photoLibraryLan: RswiftResources.StringResource { .init(key: "photo.library.lan", tableName: "Localizable", source: source, developmentValue: "Photo library", comment: nil) }

      /// en translation: Try again
      ///
      /// Key: try again
      ///
      /// Locales: en, ar
      var tryAgain: RswiftResources.StringResource { .init(key: "try again", tableName: "Localizable", source: source, developmentValue: "Try again", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `mainColor`.
    var mainColor: RswiftResources.ColorResource { .init(name: "mainColor", path: [], bundle: bundle) }

    /// Color `secondColor`.
    var secondColor: RswiftResources.ColorResource { .init(name: "secondColor", path: [], bundle: bundle) }

    /// Color `secondTextColor`.
    var secondTextColor: RswiftResources.ColorResource { .init(name: "secondTextColor", path: [], bundle: bundle) }

    /// Color `shadowColor`.
    var shadowColor: RswiftResources.ColorResource { .init(name: "shadowColor", path: [], bundle: bundle) }

    /// Color `textColor`.
    var textColor: RswiftResources.ColorResource { .init(name: "textColor", path: [], bundle: bundle) }

    /// Color `thirdColor`.
    var thirdColor: RswiftResources.ColorResource { .init(name: "thirdColor", path: [], bundle: bundle) }

    /// Color `thirdTextColor`.
    var thirdTextColor: RswiftResources.ColorResource { .init(name: "thirdTextColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 4 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `blank-check-box`.
    var blankCheckBox: RswiftResources.ImageResource { .init(name: "blank-check-box", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `check-box`.
    var checkBox: RswiftResources.ImageResource { .init(name: "check-box", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `exclamation-mark-in-a-circle`.
    var exclamationMarkInACircle: RswiftResources.ImageResource { .init(name: "exclamation-mark-in-a-circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `rectangle7`.
    var rectangle7: RswiftResources.ImageResource { .init(name: "rectangle7", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `NeoSansArabic`.
    var neoSansArabic: RswiftResources.FontResource { .init(name: "NeoSansArabic", bundle: bundle, filename: "NeoSansArabic-Regular.ttf") }

    /// Font `NeoSansArabic-Bold`.
    var neoSansArabicBold: RswiftResources.FontResource { .init(name: "NeoSansArabic-Bold", bundle: bundle, filename: "NeoSansW23-Bold.ttf") }

    /// Font `NeoSansArabic-Light`.
    var neoSansArabicLight: RswiftResources.FontResource { .init(name: "NeoSansArabic-Light", bundle: bundle, filename: "NeoSansArabic-Light.ttf") }

    /// Font `NeoSansArabic-Medium`.
    var neoSansArabicMedium: RswiftResources.FontResource { .init(name: "NeoSansArabic-Medium", bundle: bundle, filename: "NeoSansArabic-Medium.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [neoSansArabic, neoSansArabicBold, neoSansArabicLight, neoSansArabicMedium].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 4 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `NeoSansArabic-Light.ttf`.
    var neoSansArabicLightTtf: RswiftResources.FileResource { .init(name: "NeoSansArabic-Light", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NeoSansArabic-Medium.ttf`.
    var neoSansArabicMediumTtf: RswiftResources.FileResource { .init(name: "NeoSansArabic-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NeoSansArabic-Regular.ttf`.
    var neoSansArabicRegularTtf: RswiftResources.FileResource { .init(name: "NeoSansArabic-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NeoSansW23-Bold.ttf`.
    var neoSansW23BoldTtf: RswiftResources.FileResource { .init(name: "NeoSansW23-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `EmptyScreen`.
    var emptyScreen: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EmptyScreen", bundle: bundle) }

    /// Nib `MaintanceScreen`.
    var maintanceScreen: RswiftResources.NibReference<UIKit.UIView> { .init(name: "MaintanceScreen", bundle: bundle) }

    /// Nib `MoviesListView`.
    var moviesListView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "MoviesListView", bundle: bundle) }

    /// Nib `NetworkFailScreen`.
    var networkFailScreen: RswiftResources.NibReference<UIKit.UIView> { .init(name: "NetworkFailScreen", bundle: bundle) }

    /// Nib `Radio`.
    var radio: RswiftResources.NibReference<UIKit.UIView> { .init(name: "Radio", bundle: bundle) }

    /// Nib `RadioView`.
    var radioView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "RadioView", bundle: bundle) }

    /// Nib `SearchViewPicker`.
    var searchViewPicker: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SearchViewPicker", bundle: bundle) }

    func validate() throws {
      if UIKit.UIImage(named: "emptyWhiteBox", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'emptyWhiteBox' is used in nib 'EmptyScreen', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundOff", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundOff' is used in nib 'EmptyScreen', but couldn't be loaded.") }
      if UIKit.UIColor(named: "forthTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'forthTextColor' is used in nib 'EmptyScreen', but couldn't be loaded.") }
      if UIKit.UIColor(named: "secondTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'secondTextColor' is used in nib 'EmptyScreen', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ellipse782", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ellipse782' is used in nib 'MaintanceScreen', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundOff", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundOff' is used in nib 'MaintanceScreen', but couldn't be loaded.") }
      if UIKit.UIColor(named: "forthTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'forthTextColor' is used in nib 'MaintanceScreen', but couldn't be loaded.") }
      if UIKit.UIColor(named: "secondTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'secondTextColor' is used in nib 'MaintanceScreen', but couldn't be loaded.") }
      if UIKit.UIImage(named: "rectangle7", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'rectangle7' is used in nib 'NetworkFailScreen', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundOff", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundOff' is used in nib 'NetworkFailScreen', but couldn't be loaded.") }
      if UIKit.UIColor(named: "forthTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'forthTextColor' is used in nib 'NetworkFailScreen', but couldn't be loaded.") }
      if UIKit.UIColor(named: "mainColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainColor' is used in nib 'NetworkFailScreen', but couldn't be loaded.") }
      if UIKit.UIImage(named: "radioButtonChecked", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'radioButtonChecked' is used in nib 'RadioView', but couldn't be loaded.") }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var moviesListStoryboard: moviesListStoryboard { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func moviesListStoryboard(bundle: Foundation.Bundle) -> moviesListStoryboard {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.moviesListStoryboard.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `MoviesListStoryboard`.
    struct moviesListStoryboard: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = MoviesListVC

      let bundle: Foundation.Bundle

      let name = "MoviesListStoryboard"

      var moviesListVC: RswiftResources.StoryboardViewControllerIdentifier<MoviesListVC> { .init(identifier: "MoviesListVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if moviesListVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'moviesListVC' could not be loaded from storyboard 'MoviesListStoryboard' as 'MoviesListVC'.") }
      }
    }
  }
}